/* tslint:disable */
/* eslint-disable */
/**
 * Lenceas.Core.Api 接口文档——.NET 7.0.4
 * Lenceas.Core.Api HTTP API v1
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { StringApiResult } from '../models';
import { TestEditWebModel } from '../models';
import { TestWebModelApiResult } from '../models';
import { TestWebModelListApiResult } from '../models';
import { TestWebModelPageViewModelApiResult } from '../models';
import { TokenInfoViewModelApiResult } from '../models';
/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取测试信息列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestGetListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Test/GetList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 MiniProfiler Html
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestGetMiniProfilerHtmlGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Test/GetMiniProfilerHtml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取测试信息分页
         * @param {number} [pageIndex] 当前页数
         * @param {number} [pageSize] 分页大小
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestGetPageGet: async (pageIndex?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Test/GetPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除测试信息
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1TestIdDelete.');
            }
            const localVarPath = `/api/v1/Test/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取测试信息详情
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1TestIdGet.');
            }
            const localVarPath = `/api/v1/Test/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新测试信息
         * @param {number} id 
         * @param {TestEditWebModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestIdPut: async (id: number, body?: TestEditWebModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1TestIdPut.');
            }
            const localVarPath = `/api/v1/Test/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加测试信息
         * @param {TestEditWebModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestPost: async (body?: TestEditWebModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 测试-DistributedCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestTestDistributedCacheGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Test/TestDistributedCache`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 测试-MemoryCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestTestMemoryCacheGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Test/TestMemoryCache`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 测试-Redis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestTestRedisGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Test/TestRedis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取测试信息列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestGetListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TestWebModelListApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestGetListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取 MiniProfiler Html
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestGetMiniProfilerHtmlGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StringApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestGetMiniProfilerHtmlGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取测试信息分页
         * @param {number} [pageIndex] 当前页数
         * @param {number} [pageSize] 分页大小
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestGetPageGet(pageIndex?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TestWebModelPageViewModelApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestGetPageGet(pageIndex, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除测试信息
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StringApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取测试信息详情
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TestWebModelApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新测试信息
         * @param {number} id 
         * @param {TestEditWebModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestIdPut(id: number, body?: TestEditWebModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StringApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestIdPut(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加测试信息
         * @param {TestEditWebModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestPost(body?: TestEditWebModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StringApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 测试-DistributedCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestTestDistributedCacheGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StringApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestTestDistributedCacheGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 测试-MemoryCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestTestMemoryCacheGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StringApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestTestMemoryCacheGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 测试-Redis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestTestRedisGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TokenInfoViewModelApiResult>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiV1TestTestRedisGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取测试信息列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestGetListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<TestWebModelListApiResult>> {
            return TestApiFp(configuration).apiV1TestGetListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取 MiniProfiler Html
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestGetMiniProfilerHtmlGet(options?: AxiosRequestConfig): Promise<AxiosResponse<StringApiResult>> {
            return TestApiFp(configuration).apiV1TestGetMiniProfilerHtmlGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取测试信息分页
         * @param {number} [pageIndex] 当前页数
         * @param {number} [pageSize] 分页大小
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestGetPageGet(pageIndex?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<TestWebModelPageViewModelApiResult>> {
            return TestApiFp(configuration).apiV1TestGetPageGet(pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除测试信息
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestIdDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<StringApiResult>> {
            return TestApiFp(configuration).apiV1TestIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取测试信息详情
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<TestWebModelApiResult>> {
            return TestApiFp(configuration).apiV1TestIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新测试信息
         * @param {number} id 
         * @param {TestEditWebModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestIdPut(id: number, body?: TestEditWebModel, options?: AxiosRequestConfig): Promise<AxiosResponse<StringApiResult>> {
            return TestApiFp(configuration).apiV1TestIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加测试信息
         * @param {TestEditWebModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestPost(body?: TestEditWebModel, options?: AxiosRequestConfig): Promise<AxiosResponse<StringApiResult>> {
            return TestApiFp(configuration).apiV1TestPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 测试-DistributedCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestTestDistributedCacheGet(options?: AxiosRequestConfig): Promise<AxiosResponse<StringApiResult>> {
            return TestApiFp(configuration).apiV1TestTestDistributedCacheGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 测试-MemoryCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestTestMemoryCacheGet(options?: AxiosRequestConfig): Promise<AxiosResponse<StringApiResult>> {
            return TestApiFp(configuration).apiV1TestTestMemoryCacheGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 测试-Redis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TestTestRedisGet(options?: AxiosRequestConfig): Promise<AxiosResponse<TokenInfoViewModelApiResult>> {
            return TestApiFp(configuration).apiV1TestTestRedisGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @summary 获取测试信息列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestGetListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<TestWebModelListApiResult>> {
        return TestApiFp(this.configuration).apiV1TestGetListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取 MiniProfiler Html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestGetMiniProfilerHtmlGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<StringApiResult>> {
        return TestApiFp(this.configuration).apiV1TestGetMiniProfilerHtmlGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取测试信息分页
     * @param {number} [pageIndex] 当前页数
     * @param {number} [pageSize] 分页大小
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestGetPageGet(pageIndex?: number, pageSize?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<TestWebModelPageViewModelApiResult>> {
        return TestApiFp(this.configuration).apiV1TestGetPageGet(pageIndex, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除测试信息
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestIdDelete(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<StringApiResult>> {
        return TestApiFp(this.configuration).apiV1TestIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取测试信息详情
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<TestWebModelApiResult>> {
        return TestApiFp(this.configuration).apiV1TestIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新测试信息
     * @param {number} id 
     * @param {TestEditWebModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestIdPut(id: number, body?: TestEditWebModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<StringApiResult>> {
        return TestApiFp(this.configuration).apiV1TestIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 添加测试信息
     * @param {TestEditWebModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestPost(body?: TestEditWebModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<StringApiResult>> {
        return TestApiFp(this.configuration).apiV1TestPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 测试-DistributedCache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestTestDistributedCacheGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<StringApiResult>> {
        return TestApiFp(this.configuration).apiV1TestTestDistributedCacheGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 测试-MemoryCache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestTestMemoryCacheGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<StringApiResult>> {
        return TestApiFp(this.configuration).apiV1TestTestMemoryCacheGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 测试-Redis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiV1TestTestRedisGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<TokenInfoViewModelApiResult>> {
        return TestApiFp(this.configuration).apiV1TestTestRedisGet(options).then((request) => request(this.axios, this.basePath));
    }
}
